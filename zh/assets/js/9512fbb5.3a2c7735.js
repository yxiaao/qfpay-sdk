"use strict";(self.webpackChunkqfpay_sdk=self.webpackChunkqfpay_sdk||[]).push([[8815],{13967:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=t(74848),r=t(28453);const o={},s="QFPay Element SDK",i={id:"online-shop/paymentelement",title:"QFPay Element SDK",description:"Element Sequence diagram",source:"@site/docs/03-online-shop/paymentelement.md",sourceDirName:"03-online-shop",slug:"/online-shop/paymentelement",permalink:"/qfpay-sdk/zh/docs/online-shop/paymentelement",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/03-online-shop/paymentelement.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Online Pre-authorisation Payment APIs",permalink:"/qfpay-sdk/zh/docs/online-shop/online-pre-authorisation"},next:{title:"QFPay Subscription API",permalink:"/qfpay-sdk/zh/docs/online-shop/subscription"}},l={},c=[{value:"import JS library",id:"import-js-library",level:4},{value:"Code examples",id:"code-examples",level:4},{value:"Instruction Manual",id:"instruction-manual",level:4},{value:"global object QFPay and related APIs",id:"global-object-qfpay-and-related-apis",level:5},{value:"payment object and APIs",id:"payment-object-and-apis",level:5},{value:"token object and APIs",id:"token-object-and-apis",level:5},{value:"element object and APIs",id:"element-object-and-apis",level:5},{value:"retrieve selected wallet type",id:"retrieve-selected-wallet-type",level:5}];function p(e){const n={code:"code",h1:"h1",h4:"h4",h5:"h5",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"qfpay-element-sdk",children:"QFPay Element SDK"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{src:"https://www.plantuml.com/plantuml/png/VLF1ZXCn3BtdAwozmuAuzO1s0Qs4458H7r0bgQTZTPBCEiukvUjn9bEbhO1BbTX-p--zPXwoM9OI9cEz90PVigI033OlPpDhcppDDWhSVKVsOpqzSOg2SG-VH_J7L0Isze1t5HM6Vs0-MNzKI1jorqC_dhRs13XXGBt-_F9jcNeUjFAtmKvLXvpUZ36sI8ebE6HJbSERZwfb0_wiK0rIYYOCIyTTT1YV2whNu6gh4MgRqGh2R4-BAAg6nSIaDQR3AEPn-tK3zsj_jug_Vtb_tv2xSsT5rhWgsZ1AuVWVukiElD8qWKF0NpCnxhKC7zv1e5W4SwSDxcnvNT2okYPhzbko6wsHa9teDuAtl8SXST1rCjwYMg8TE5H9CgumYXLeQxpNqK_aZv2B2oJWYaYApUQ4WvWARqK82geEASmjHNNfJX3MfzCztgX_IKVKcufzwrCSYCDsrJsKw8MkzhLKTeMdwXCqIMBq0dFXEMNiInRw_X3MBFepQVKB8NqWbqaQlcNGUpvLRsgiJiqfwi83fp833N2XZ39alA4uA-qVfwHBp2kwJB8OC2lfOpv5FtAAgUHgYWRoxV_fueFhwdBn7lFDQELxq9yIfZy0",alt:"Element Sequence diagram"})}),"\n",(0,a.jsx)(n.p,{children:"create your own checkout flows by using QFPay prebuilt UI components"}),"\n",(0,a.jsx)(n.h4,{id:"import-js-library",children:"import JS library"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'// sanbox environment\n<script src="https://cdn-int.qfapi.com/qfpay_element/qfpay.js"><\/script>\n// live test environment\n<script src="https://test-cdn-hk.qfapi.com/qfpay_element/qfpay.js"><\/script>\n// production environment\n<script src="https://cdn-hk.qfapi.com/qfpay_element/qfpay.js"><\/script>\n'})}),"\n",(0,a.jsx)(n.h4,{id:"code-examples",children:"Code examples"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"payment mode"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'//1.1 credit card form (visa/mastercard)\n\n// initialize qfpay object\nconst qfpay = QFpay.config()\n\n// initialize payment object\nconst payment = qfpay.payment()\n\n// set payment related parameters\npayment.pay({\n  goods_name: "goods",\n  paysource: "payment_element"\n}, "e487a02e3e1143e482db765ccec63d58")\n\n// initialize element object and generate card form\nconst elements = qfpay.element()\nelements.createEnhance({\n  selector: "#container"\n})\n\n// trigger card form submission and receive payment response\nconst response = qfpay.confirmPayment({\n  return_url: \'https://xxx.xxx.com\'\n})\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"//1.2 wallet list (including credit card form, Alipay HK, Alipay CN, WechatPay, QuickPass, FPS, Payme\n// initialize qfpay object\nconst qfpay = QFpay.config()\n\n// initialize payment object\nconst payment = qfpay.payment()\n\n// validate payment intent valye\nqfpay.retrievePaymentIntent()\n\n// set payment parameters\npayment.walletPay({\n\tlang:  'zh-cn',\n\tgoods_info:  'goods_info',\n\tgoods_name:  \"goods_name\",\n\tpaysource:  \"payment_element_checkout\",\n\tout_trade_no: intentParams.out_trade_no,\n\ttxamt:  intentParams.txamt,\n\ttxcurrcd:  intentParams.txcurrcd,\n},intentParams.payment_intent);\n// initalize element object and create wallet list\nconst  appearance = {\n\tvariables: {\n\t\tcolourComponentText:  'black',\n\t\tcolorQRCodeTopPromptContent:  '#000000',\n\t\tcolorQRCodeBottomPromptContent:  '#000000',\n\t\tfontWeightQRCodeTopPrompt:  '900',\n\t\tfontWeightQRCodeBottomPrompt:  '300'\n\t},\n\tbillingAddressDisplay: {\n\t\tcity:  true,\n\t\taddress1:  true,\n\t\taddress2:  true,\n\t}\n}\nconst elements = qfpay.element(appearance)\nelements.createWallet({\n\tselector:  \"#container\"\n})\n\n//trigger submission and retrieve payment response\nconst response = qfpay.confirmWalletPayment({\nreturn_url:  'https://xxx.xxx.com'\n})\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"2",children:["\n",(0,a.jsx)(n.li,{children:"payment token creation mode"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'//2.1 credit card form\n// initialize qfpay object\nconst qfpay = QFpay.config()\n\n// initialize token object\nconst token = qfpay.token()\n\n// set token cereation parameters\ntoken.intent({\n  paysource: "payment_element"\n},"e487a02e3e1143e482db765ccec63d58")\n\n// initialize element object,and generate card-form \nconst elements = qfpay.element()\nelements.createEnhance({\n  seletor: "#container",\n  element: "token"\n})\n\n// trigger form submission and receive response\nconst response = qfpay.createToken({\n  return_url: \'https://xxx.xxx.com\'\n})\n'})}),"\n",(0,a.jsx)(n.h4,{id:"instruction-manual",children:"Instruction Manual"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-Prerequisites:",children:"import SDK library (qfpay.js) according to your environment and purpose\n"})}),"\n",(0,a.jsx)(n.h5,{id:"global-object-qfpay-and-related-apis",children:"global object QFPay and related APIs"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"QFpay.config(params)"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"/**\n * parameters: optional, Object, default valie: {region: 'hk', env: 'prod'},\n *      region possible values\uff1a\n *        'hk' \t\t- live/live test\n *        'qa' \t\t- sandbox\n *\n *      env possible values:\n *        'prod' \t- live environment\n *        'test' \t- live test environment\n *        'qa' \t\t- sandbox environment\n * return: qfpay object\n * purpose: generate qfpay global object\n */\nconst qfpay = QFpay.config()\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"2",children:["\n",(0,a.jsx)(n.li,{children:"qfpay.retrievePaymentIntent()"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"/**\n * parameters: N/A\n * return: response code, payment intent is available for use if '0000' value, otherwise not available\n * purpose: validate payment intent is correct and available for use\n */\nconst intentResponse = qfpay.retrievePaymentIntent()\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"3",children:["\n",(0,a.jsx)(n.li,{children:"qfpay.element(appearance)"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"/**\n * parameters: optional, Object, {theme: string, variables: Object, billingAddressDisplay: Object}\n *      theme: support only value 'night', night mode, \n *      if values are set in variables, the style will apply those values only\n *      variables: {\n *        fontFamily: 'cursive',         // Font Family\n *        fontWeight: '400',             // Font Weight\n *        colorText: 'black',            // Text Color\n *        sizeFontSubTitle: 'inherit',   // Font Size\n *        colourBackground: '#fff',      // Background Color\n *        colourPrimary: '#ced4da',      // Input Box Color\n *        colourComponentText: 'purple', // Input Box Text Color\n *        sizeComponentText: '15px',     // Input Box Font Size\n *        colourErrorMessage: '#da5d4a', // Error Message Color\n *        sizeErrorMessage: 'inherit'    // Error Message Font Size\n *        colorPaymentButton: '#000000' //payment button color\n *        colorPaymentButtonText: '#FFFFFF'  //payment button text color\n *        colorQRCodeTopPromptContent: '#000000'  // QRCode Top memo text color\n *        colorQRCodeBottomPromptContent: '#000000'  //QRCode bottom memo text color\n *       fontWeightQRCodeTopPrompt: '900'  //QRCode Top memo font weight\n *       fontWeightQRCodeBottomPrompt: '300'  //QRCode bottom memo font weight\n *      }\n *      billingAddressDisplay: {\n *        city: true      // flag for controlling displayment of city &  postal code in billing address\n *        address1: true  // flag for controlling displayment of address1 in billing address\n *        address2: true  // flag for controlling displayment of address2 in billing address\n *      }\n * return\uff1aelement object\n * purpose: generate element object\n */\nconst elements = qfpay.element()\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"4",children:["\n",(0,a.jsx)(n.li,{children:"qfpay.payment()"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"/**\n * parameters: N/A\n * return\uff1a payment object\n * purpose: generate payment object\n */\nconst qfpay = QFpay.config()\nconst payment = qfpay.payment()\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"5",children:["\n",(0,a.jsx)(n.li,{children:"qfpay.confirmPayment()"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"/**\n * parameters\uff1aoptional, Object type, {return_url: 'https://xxx.xxx.xxx'}, the page will be redirect to specific page mentioned in return_url parameter after payment completed. Otherwise, will stay in the same page\n * return\uff1a\n *   1. card payment\n *      return value\uff1acode, description, out_trade_no, syssn\n *      '0000' response code if success payment,\n *      otherwise failure payment, error message can reference to description\n *\n *   2. ApplePay\n *      return value\uff1acode, description; \n *      code value:'1111', Applepay payment cancalled\n *      code value:'0000', payment success, can refer to description value for payment status description\n * purpose\uff1areturn payment result\n */\nconst paymentResponse = qfpay.confirmPayment({\n  return_url: 'https://www.baidu.com'\n})\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"6",children:["\n",(0,a.jsx)(n.li,{children:"qfpay.confirmWalletPayment()"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"/**\n * parameters\uff1aoptional, Object type, {return_url: 'https://xxx.xxx.xxx'}, the page will be redirect to specific page mentioned in return_url parameter after payment completed. Otherwise, will stay in the same page\n * return\uff1a\n *   1. card payment\n *      return value\uff1acode, description, out_trade_no, syssn\n *      '0000' response code if success payment,\n *      otherwise failure payment, error message can reference to description\n * purpose\uff1areturn payment result\n */\nconst paymentResponse = qfpay.confirmPayment({\n  return_url: 'https://www.baidu.com'\n})\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"7",children:["\n",(0,a.jsx)(n.li,{children:"qfpay.token()"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"/**\n * parameters: N/A\n * return\uff1atoken object\n * purpose: generate token object\n */\nconst qfpay = QFpay.config()\nconst payment = qfpay.token()\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"8",children:["\n",(0,a.jsx)(n.li,{children:"qfpay.retrieveTokenIntent()"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"/**\n * parameters: N/A\n * return: code\n *     code value: '0000', token is available for use\n *     otherwise token is not available for use\n * purpose: validate token intent is correct and available for use\n */\nconst intentResponse = qfpay.retrievePaymentIntent()\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"9",children:["\n",(0,a.jsx)(n.li,{children:"qfpay.createToken()"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'/**\n * \u53c2\u6570\uff1aoptional\uff0cObject\uff0c{return_url: \'https://xxx.xxx.xxx\'},the page will be redirect to specific page mentioned in return_url parameter after action completed. Otherwise, will stay in the same page\n * \n * return\uff1acode,description,customer_id, card info,token info\n *     code value \'0000\', action success\n *     customer_id: QFPay generated customer Id\n *     card: {\n *         brand: "xxxx", // card scheme, e.g. VISA\n *         suffix: "xxxx" // card number last 4 digits, e.g. 1000\n *     }\n *     token: {\n *         event: "CREATE", // create token action\n *         token_id: "xxxxxxx" // generated payment token id\n *     }\n *     other code value, please refer to descirption value for fail reason\n * purpose\uff1areturn token related info.\n */\n'})}),"\n",(0,a.jsx)(n.h5,{id:"payment-object-and-apis",children:"payment object and APIs"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const qfpay = QFpay.config()\nconst payment = qfpay.payment()\n"})}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"payment.pay(params1, params2)"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"/**\n * parameters\uff1a\t\n *     \t   params1\uff0cmandatory\uff0cObject, \n *              {goods_name: '', paysource: 'payment_element'}\n *               goods_name: goods name,optional;\n *               paysource: fixed, value:payment_element, mandatory\n *         params2, mandatory, string, payment intent value from API\n * extra special parameters in 'params1'\uff1a\n *         customer_id: params1 optional parameter\uff0cQFPay generated customer Id\n *         token_expiry: params1 optional parameter, Token expiry date\n *         token_reason: params1 optional parameter, Reason for token creation\n *         token_reference: params1 optional parameter, Reference for token\n *         no need pass above special parameters if use payment function only\n *         if would like to collect card information for tokenization purpose, then need pass above parameters\n * return: No\n * purpose\uff1aset payment parameters\n */\npayment.pay({\n  goods_name: 'goods',\n  paysource: 'payment_element'\n}, 'SDF8980SFFSDF890SDF')\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"2",children:["\n",(0,a.jsx)(n.li,{children:"payment.walletPay(params1, params2)"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"/**\n * parameters:\n *     params1, mandatory, Object, { lang: 'zh-cn', goods_name: '', paysource: 'payment_element', paysource: \"payment_element_checkout\", out_trade_no: intentParams.out_trade_no, txamt: intentParams.txamt, txcurrcd: intentParams.txcurrcd}\n *     lang: language, optional, zh-cn:simplify chinese, zh-hk traditional chinese, en: english\n *     goodsname: goods name, optional,\n *     paysource: fix value, payment_element_checkout,mandatory\n *     out_trade_no: merchant order id, mandatory\n *     txamt: transaction amount, mandatory\n *     txcurrcd: transaction currency, mandatory\n *     params2, mandatory, string, payment intent value from \n * extra special parameters in 'params1':\n *         customer_id: params1 optional parameter\uff0cQFPay generated customer Id\n *         token_expiry: params1 optional parameter, Token expiry date\n *         token_reason: params1 optional parameter, Reason for token creation\n *         token_reference: params1 optional parameter, Reference for token\n *         no need pass above special parameters if use payment function only\n *         if would like to collect card information for tokenization purpose, then need pass above parameters\n * return: No\n * purpose\uff1aset payment parameters\n */\npayment.walletPay({\n\tgoods_info:  'goods_info',\n\tgoods_name:  \"goods_name\",\n\tpaysource:  \"payment_element_checkout\",\n\tout_trade_no:  intentParams.out_trade_no,\n\ttxamt:  intentParams.txamt,\n\ttxcurrcd:  intentParams.txcurrcd,\n}, 'SDF8980SFFSDF890SDF')\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"3",children:["\n",(0,a.jsx)(n.li,{children:"payment.inquiry(params1, params2)"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"/**\n * parameters: \n *      params1, mandatory\uff0c Object, {syssn: string, out_trade_no: string, pay_type: string, respcd: stirng, start_time: string, end_time: string} | {}\n *               syssn: QF QF system serial no, use comma to separate mutliple values\n *               out_trade_no: merchant order ID, use comma to separate multiple values\n *               pay_type: payment type, use comma to separate multiple values\n *               respcd: response code, default all response code\n *               start_time: start time, format: 'YYYY-MM-DD HH:mm:ss', default current month start\n *               end_time: end time, format: 'YYYY-MM-DD HH:mm:ss', default current month end\n *      params2, mandatory, string, payment intent from API\n * return: inquiry result\n * purpose\uff1ainquiry payment result\n */\nconst inquiryResponse = payment.inquiry({}, 'SDF8980SFFSDF890SDF')\n"})}),"\n",(0,a.jsx)(n.h5,{id:"token-object-and-apis",children:"token object and APIs"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const qfpay = QFpay.config()\nconst token = qfpay.token()\n"})}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"token.intent(params1, params2)"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"/**\n * parameters\uff1a\n *      params1, mandatory\uff0cObject, {paysource: 'payment_element'}\n *               paysource: fixed, value: payment_element\uff0cmandatory\n *      params2, mandatory, string, payment intent from API\n * return: N/A\n * purpose\uff1aset token intent parameters\n */\ntoken.intent({\n  paysource: 'payment_element'\n}, 'SDF8980SFFSDF890SDF')\n"})}),"\n",(0,a.jsx)(n.h5,{id:"element-object-and-apis",children:"element object and APIs"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const qfpay = QFpay.config()\nconst elements = qfpay.element()\n"})}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"elements.create(params1, params2, params3) --- support Visa/Mastercard card payment only"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'/**\n * parameters\uff1a\n *      params1, mandatory, string, card form id\n *      params2, optional, boolean, default value is:true, card form will show email address input if true value\n *      params3, optional, string, default value:payment, generate card form\n * return: N/A\n * purpose: generate card form\n */\nelements.create("#container")\n'})}),"\n",(0,a.jsxs)(n.ol,{start:"2",children:["\n",(0,a.jsx)(n.li,{children:"elements.createEnhance(params) ---  support Visa Mastercard card payment, ApplePay payment,  token creation,  token creation in payment mode"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"/**\n * parameters\uff1aparams: Object, {selector: string, email: boolean, tab: boolean, element: string}\n *      selector: mandatory, string, element wallet id\n *      email: optional, boolean, default value:true, card form will show email address input if true\n *      tab: optional, boolean, default value:false, \n *           true:  element wallet switch way is tab \n *           false: wallet list switch way is vertical list\n *      element: optional, string, default value:payment, \n *           payment: normal payment mode\n *           token: token creation mode  \n * return: N/A\n * purpose: generate element wallet\n * NOTICE\uff1atab parameter only effecitve in payment mode\n */\nelements.createEnhance({\n  selector: '#container'\n})\n"})}),"\n",(0,a.jsx)(n.h5,{id:"retrieve-selected-wallet-type",children:"retrieve selected wallet type"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"window.addEventListener('walletType', ({detail}) => {\n  /**\n   * detail: possible: ApplePay and Card\n   * detail:ApplePay, selected payment method is applepay\n   * detail:Card, selected payment method is card payment\n   */\n})\n"})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var a=t(96540);const r={},o=a.createContext(r);function s(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);